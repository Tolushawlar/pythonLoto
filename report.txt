Object-Oriented Programming (OOP) is a programming paradigm that focuses on organizing code into objects, which are instances of classes. It allows developers to model real-world entities as objects, making it easier to understand and manage complex systems. Python, being an object-oriented programming language, fully supports OOP concepts.Object-Oriented Programming (OOP) is a programming paradigm that focuses on organizing code into objects, which are instances of classes. It allows developers to model real-world entities as objects, making it easier to understand and manage complex systems.
 Python, being an object-oriented programming language, fully supports OOP concepts.

Key Concepts in OOP:

Classes: A class is a blueprint or template for creating objects. It defines the attributes (data) and methods (functions) that the objects of the class will have. You can think of a class as a user-defined data type.


Objects: An object is an instance of a class. It represents a specific instance of the data and behaviors defined by the class. You can create multiple objects from the same class, each with its own unique state.


Encapsulation: Encapsulation is the principle of bundling data and the methods that operate on that data within a single unit (i.e., a class). It helps in hiding the internal details of how data is stored and manipulated, providing a clean interface to interact with the object.


Abstraction: Abstraction allows you to expose only relevant information to the outside world while hiding unnecessary implementation details. It simplifies the complexity by providing a simple interface to interact with objects.


Inheritance: Inheritance is a mechanism in which one class (subclass) can inherit attributes and methods from another class (superclass). It promotes code reuse and allows you to create specialized classes based on existing ones.


Polymorphism: Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables you to write code that works with objects of multiple classes, as long as they share a common interface (methods).


class Dog:
    # Constructor - initializes the dog's name and age
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Method to make the dog bark
    def bark(self):
        print(f"{self.name} says: Woof!")
# Create an instance of the Dog class
dog1 = Dog("Buddy", 2)
# Access attributes and call methods of the dog object
print(f"{dog1.name} is {dog1.age} years old.")
dog1.bark()









The __init__ method is a special method in Python's object-oriented programming that is automatically called when an object is created from a class. It serves as a constructor for the class and is used to initialize the object's attributes (data) when it is created.

The __init__ method is defined within the class and takes the self parameter as its first argument. The self parameter is a reference to the instance of the object being created. It allows you to access and modify the object's attributes and call its methods.



class MyClass:
    def __init__(self, arg1, arg2, ...):
        # Initialization code here
        self.attribute1 = arg1
        self.attribute2 = arg2
        # ...

The class keyword is used to define a new class, and MyClass is the name of the class in this example.

Inside the class definition, the __init__ method is defined with def followed by double underscores (__init__) and parentheses (self, arg1, arg2, ...). The self parameter must always be the first parameter in the method.

The arg1, arg2, etc. are the arguments that you pass when creating an object of the class. These arguments are used to initialize the object's attributes.

Inside the __init__ method, you can assign the passed arguments to the object's attributes using self.attribute_name = argument_name. The self is necessary to access the instance's attributes and differentiate them from local variables.


Example

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Creating an object of the Person class
person1 = Person("Alice", 30)
# Accessing object attributes
print(person1.name)  # Output: Alice
print(person1.age)   # Output: 30

Person class with an __init__ method that initializes the name and age attributes when a Person object is created. We created an object person1 and passed "Alice" and 30 as arguments to the constructor. The __init__ method then assigns these values to the object's name and age attributes.














To add a new method to a class in Python's object-oriented programming, you can simply define the new method within the class. Using a PizzaMaker class with some existing methods, and now you want to add a new method called add_topping() to allow adding toppings to the pizza.


# pizza maker class 
class PizzaMaker:
    def __init__(self):
        self.pizza = []

    def add_base(self, base):
        self.pizza.append(f"Base: {base}")
    def add_sauce(self, sauce):
        self.pizza.append(f"Sauce: {sauce}")
    def add_cheese(self, cheese):
        self.pizza.append(f"Cheese: {cheese}")
    def add_topping(self, topping):
        self.pizza.append(f"Topping: {topping}")
    def bake(self):
        print("Baking the pizza...")
    def display_pizza(self):
        print("Pizza ingredients:")
        for ingredient in self.pizza:
            print(ingredient)
# Create an instance of the PizzaMaker class
pizza_maker = PizzaMaker()
# Adding ingredients to the pizza
pizza_maker.add_base("Thin crust")
pizza_maker.add_sauce("Tomato sauce")
pizza_maker.add_cheese("Mozzarella")
pizza_maker.add_topping("Mushrooms")
pizza_maker.add_topping("Pepperoni")
# Display the pizza ingredients
pizza_maker.display_pizza()
# Bake the pizza
pizza_maker.bake()

ou can create a method in a class that utilizes other methods within the same class. We can modify the PizzaMaker class to include a new method called prepare_pizza() that uses the existing methods add_base, add_sauce, add_cheese, and add_topping to prepare the pizza step by step.

Here's the updated example:
# method using other methods
class PizzaMaker:
    def __init__(self):
        self.pizza = []

    def add_base(self, base):
        self.pizza.append(f"Base: {base}")
    def add_sauce(self, sauce):
        self.pizza.append(f"Sauce: {sauce}")
    def add_cheese(self, cheese):
        self.pizza.append(f"Cheese: {cheese}")
    def add_topping(self, topping):
        self.pizza.append(f"Topping: {topping}")
    def bake(self):
        print("Baking the pizza...")
    def display_pizza(self):
        print("Pizza ingredients:")
        for ingredient in self.pizza:
            print(ingredient)
    def prepare_pizza(self):
        self.add_base("Thin crust")
        self.add_sauce("Tomato sauce")
        self.add_cheese("Mozzarella")
        self.add_topping("Mushrooms")
        self.add_topping("Pepperoni")
        print("Pizza is ready to be baked!")
# Create an instance of the PizzaMaker class
pizza_maker = PizzaMaker()
# Prepare the pizza using the prepare_pizza method
pizza_maker.prepare_pizza()
# Display the pizza ingredients
pizza_maker.display_pizza()
# Bake the pizza
pizza_maker.bake()

prepare_pizza(self) to the PizzaMaker class. This method uses the existing methods add_base, add_sauce, add_cheese, and add_topping to prepare the pizza step by step. The prepare_pizza method calls these methods in sequence to add different ingredients to the pizza.

After creating an instance of the PizzaMaker class (pizza_maker), we use the prepare_pizza() method to prepare the pizza. Then, we display the pizza's ingredients using the display_pizza() method and finally bake the pizza with the bake() method.
Using methods that call other methods within the same class allows you to break down the functionality into smaller, reusable pieces, making your code more organized and maintainable. It's a common practice in object-oriented programming to design classes with cohesive methods that interact with each other to perform specific tasks.





Inheritance is a fundamental concept in object-oriented programming (OOP) that allows a new class (subclass) to inherit attributes and methods from an existing class (superclass). The subclass can then extend or override the attributes and methods inherited from the superclass. This promotes code reuse and helps in creating a hierarchy of classes with shared functionalities.

Inheritance and extending attributes in Python OOP with an example:
class Animal:
    def __init__(self, species):
        self.species = species

    def make_sound(self):
        print("Generic animal sound")
    def show_species(self):
        print(f"I am a {self.species}")
# Subclass - Dog, inheriting from Animal
class Dog(Animal):
    def __init__(self, breed, name):
        # Call the constructor of the superclass
        super().__init__("Dog")
        self.breed = breed
        self.name = name
    # Overriding the make_sound method
    def make_sound(self):
        print("Woof!")
    def show_info(self):
        print(f"I am a {self.breed} named {self.name}")
# Create an instance of the Dog class
dog1 = Dog("Labrador", "Buddy")
# Access attributes and call methods from both classes
dog1.show_species()  # Output: I am a Dog
dog1.show_info()     # Output: I am a Labrador named Buddy
dog1.make_sound()    # Output: Woof!


We defined a base class called Animal, which has a constructor (__init__) that takes a species argument and an instance method called make_sound() that displays a generic animal sound and show_species() to display the species.

We defined a subclass called Dog, which inherits from the Animal class. The Dog class has its own constructor that takes breed and name arguments, and it calls the superclass's constructor using super().__init__("Dog") to initialize the species attribute.

In the Dog class, we override the make_sound() method to provide a specific sound for dogs.

The show_info() method is specific to the Dog class, and it shows additional information about the dog's breed and name.

We created an instance of the Dog class (dog1) and demonstrated how it inherits and extends attributes and methods from both the Animal class (superclass) and the Dog class (subclass).

In this example, the Dog class inherits the species attribute and the make_sound() method from the Animal class. Additionally, it extends the functionality by adding its own breed and name attributes and the show_info() method.

Inheritance allows you to create specialized classes (subclasses) based on more general classes (superclasses), making it easier to organize and manage code.


